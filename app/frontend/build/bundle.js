(()=>{"use strict";const e=new class{mouseMove(e){d.moveWindow(e)}openApp(e){d.openApp(e)}closeApp(e){d.closeApp(e)}toggleHideApp(e){d.toggleHideApp(e)}turnOff(){d.turnOff()}};class t{constructor(e,t,n){this.mouse=t,this.appsController=n,this.eventController=e,this.desktop=document.getElementById("id_desktop")}createShortcut(t){const n=document.createElement("div"),s=document.createElement("button"),i=document.createElement("img");n.setAttribute("id","id_shortcuts"),s.setAttribute("id",`${t.name}sc`),s.classList.add("winCl-ShortcutBtn"),s.classList.add("winCl-Grabber"),s.dataset.width="75",s.addEventListener("dblclick",(()=>{e.openApp(t)})),s.addEventListener("mousedown",(()=>{const e=this.mouse.x,s=n.offsetLeft;this.eventController.addEvent({name:`${t.name}sc_drag`,event:"mousemove",callback:()=>{this.moveElement(e,s,n,!0)}})})),this.eventController.addEvent({name:`${t.name}sc_drag_up`,event:"mouseup",callback:()=>{this.eventController.removeEvent(`${t.name}sc_drag`)}}),i.setAttribute("src",`Assets/${t.img}`),i.setAttribute("loading","lazy"),i.classList.add("winCl-ShortcutImg"),s.append(i),s.innerHTML+=t.name,n.append(s),this.desktop.append(n)}removeWindow(e){document.getElementById(e).remove(),document.getElementById(`${e}mini`).remove()}webindowsLoadingScreen(e){let t=document.getElementById("turnOff");t.style.backgroundImage="url('Assets/Img_LoadingWindows.PNG')",t.style.display="block",setTimeout((function(){t.style.display="none"}),e)}createWindow(e){const t=document.createElement("div"),s=document.createElement("iframe"),i=document.createElement("div"),o=document.createElement("div"),l=document.createElement("div"),a=document.createElement("div"),r=document.createElement("div"),d=document.createElement("div");t.setAttribute("id",`${e.name}`),t.classList.add("winCl-BasicWindow"),t.style.width=e.width,t.style.height=e.height,s.setAttribute("id",`${e.name}`),s.setAttribute("src",`${e.html}`),s.setAttribute("loading","lazy"),s.style.width=parseInt(t.style.width)-5,s.style.height=parseInt(t.style.height)-37,s.classList.add("winCl-Frame"),s.onload=()=>{this.eventController.addFrame(s);const e=s.contentDocument||s.contentWindow.document;e.addEventListener("mousemove",(e=>{!function(e,t){const n=t.getBoundingClientRect(),s=n.left+e.clientX,i=n.top+e.clientY;window.parent.postMessage({type:"mousemove",clientX:s,clientY:i},"*")}(e,s)})),e.addEventListener("mousedown",(e=>{this.adjustZIndex(t)}))},t.append(this.createWindowHeader(e)),t.append(s),t.append(i),t.append(o),t.append(l),t.append(a),t.append(r),t.append(d),t.style.position="absolute",t.style.left=window.innerWidth/2-100+"px",t.style.top=window.innerHeight/2-200+"px",e.position.x=parseInt(t.style.left),e.position.y=parseInt(t.style.top),i.classList.add("resize-handle-hori"),i.classList.add("left"),o.classList.add("resize-handle-hori"),o.classList.add("right"),l.classList.add("resize-handle-vert"),l.classList.add("top"),a.classList.add("resize-handle-vert"),a.classList.add("bottom"),r.classList.add("resize-handle-diag"),r.classList.add("right-bottom"),d.classList.add("resize-handle-diag"),d.classList.add("left-bottom"),a.addEventListener("mousedown",(()=>{const n=this.mouse.y,i=this.mouse.y-t.offsetTop;this.eventController.addFrameEvent({name:`${e.name}_resize`,event:"mousemove",callback:()=>{e.isFullScreen||(t.style.height=Math.max(this.mouse.y-n+parseInt(i),50)+"px",s.style.height=Math.max(this.mouse.y-n+parseInt(i)-37,20)+"px",this.appsController.moved(e.name,t.style.left,t.style.top),this.appsController.resized(e.name,t.style.width,t.style.height))}})})),l.addEventListener("mousedown",(()=>{const n=this.mouse.y,i=t.style.height,o=s.style.height;this.eventController.addFrameEvent({name:`${e.name}_resize`,event:"mousemove",callback:()=>{e.isFullScreen||n-this.mouse.y+parseInt(i)<50||(t.style.top=this.mouse.y+"px",s.style.top=this.mouse.y-37+"px",t.style.height=Math.max(n-this.mouse.y+parseInt(i),50)+"px",s.style.height=Math.max(n-this.mouse.y+parseInt(o),20)+"px",this.appsController.moved(e.name,t.style.left,t.style.top),this.appsController.resized(e.name,t.style.width,t.style.height))}})})),o.addEventListener("mousedown",(()=>{const n=this.mouse.x,i=t.style.width,o=s.style.width;this.eventController.addFrameEvent({name:`${e.name}_resize`,event:"mousemove",callback:()=>{e.isFullScreen||(t.style.width=Math.max(this.mouse.x-n+parseInt(i),200)+"px",s.style.width=Math.max(this.mouse.x-n+parseInt(o),195)+"px",this.appsController.moved(e.name,t.style.left,t.style.top),this.appsController.resized(e.name,t.style.width,t.style.height))}})})),i.addEventListener("mousedown",(()=>{const n=this.mouse.x,i=t.style.width,o=s.style.width;this.eventController.addFrameEvent({name:`${e.name}_resize`,event:"mousemove",callback:()=>{e.isFullScreen||n-this.mouse.x+parseInt(i)<200||(t.style.left=this.mouse.x+"px",s.style.left=this.mouse.x+"px",t.style.width=Math.max(n-this.mouse.x+parseInt(i),200)+"px",s.style.width=Math.max(n-this.mouse.x+parseInt(o),195)+"px",this.appsController.moved(e.name,t.style.left,t.style.top),this.appsController.resized(e.name,t.style.width,t.style.height))}})})),r.addEventListener("mousedown",(()=>{this.eventController.addFrameEvent({name:`${e.name}_resize`,event:"mousemove",callback:()=>{if(e.isFullScreen)return;const i=this.mouse.y-t.offsetTop,o=n({x:t.offsetLeft,y:t.offsetTop},{x:this.mouse.x,y:this.mouse.y}),l=Math.sqrt(-1*i*i+o*o);t.style.height=Math.max(i,50)+"px",s.style.height=Math.max(i-37,20)+"px",t.style.width=Math.max(l,200)+"px",s.style.width=Math.max(l-5,195)+"px",this.appsController.moved(e.name,t.style.left,t.style.top),this.appsController.resized(e.name,t.style.width,t.style.height)}})})),d.addEventListener("mousedown",(()=>{const i=parseInt(t.style.width),o=t.offsetLeft;this.eventController.addFrameEvent({name:`${e.name}_resize`,event:"mousemove",callback:()=>{if(e.isFullScreen)return;const l=this.mouse.y-t.offsetTop,a=n({x:o+i,y:t.offsetTop},{x:this.mouse.x,y:this.mouse.y}),r=Math.sqrt(-1*l*l+a*a);r>200&&(t.style.left=this.mouse.x+"px",t.style.width=Math.max(r,200)+"px",s.style.width=Math.max(r-5,195)+"px"),l>50&&(s.style.left=this.mouse.x+"px",t.style.height=Math.max(l,50)+"px",s.style.height=Math.max(l-37,20)+"px"),this.appsController.moved(e.name,t.style.left,t.style.top),this.appsController.resized(e.name,t.style.width,t.style.height)}})})),this.eventController.addEvent({name:`${e.name}_resize_up`,event:"mouseup",callback:()=>{this.eventController.removeFrameEvent(`${e.name}_resize`)}}),t.addEventListener("mousedown",(()=>{this.adjustZIndex(t)})),this.desktop.prepend(t)}createWindowHeader(t){const n=document.createElement("div"),s=document.createElement("button"),i=document.createElement("button"),o=document.createElement("button");return n.classList.add("winCl-WindowHeader"),n.classList.add("winCl-Grabber"),n.addEventListener("mousedown",(()=>{const e=this.mouse.x,n=document.getElementById(t.name),s=n.offsetLeft;this.eventController.addFrameEvent({name:`${t.name}_drag`,event:"mousemove",callback:()=>{this.moveElement(e,s,n),t.isFullScreen||this.appsController.moved(t.name,n.style.left,n.style.top)}})})),this.eventController.addEvent({name:`${t.name}_drag_up`,event:"mouseup",callback:()=>{this.eventController.removeFrameEvent(`${t.name}_drag`)}}),s.classList.add("winCl-BtnHeader"),s.classList.add("winCl-CloseIcon"),s.addEventListener("mousedown",(()=>{e.closeApp(t.name)})),i.classList.add("winCl-BtnHeader"),i.classList.add("winCl-ExpandIcon"),i.addEventListener("mousedown",(()=>{const e=document.getElementById(t.name);return t.isFullScreen?(this.unexpandWindow(t,e),void this.appsController.toggleExpand(t.name)):t.isFullScreen?void 0:(this.expandWindow(e),void this.appsController.toggleExpand(t.name))})),o.classList.add("winCl-BtnHeader"),o.classList.add("winCl-MinimizeIcon"),o.addEventListener("mousedown",(()=>{e.toggleHideApp(t.name)})),n.innerHTML+=t.name,n.append(s),n.append(i),n.append(o),this.createHiddenApp(t),n}createHiddenApp(t){const n=document.createElement("button"),s=document.getElementById("id_minnedApps");n.setAttribute("id",`${t.name}mini`),n.classList.add("winCl-MinimizedBtn"),n.addEventListener("click",(()=>{e.toggleHideApp(t.name)})),n.innerHTML=`\n                    <img src="Assets/${t.img}" style="width: 32px; height: 28px; padding-top: 0px;">\n                    <p style="margin: 0px; margin-top: 8px;" >\n                        ${t.name}\n                    </p>\n                    `,s.prepend(n)}hideWindow(e){document.getElementById(e).style.display="none"}showWindow(e){document.getElementById(e).style.display="block"}adjustZIndex(e){const t=document.getElementsByClassName("winCl-BasicWindow");for(let e=0;e<t.length;e++)t[e].style["z-index"]=1;e.classList.contains("winCl-ShortcutBtn")||(e.style["z-index"]=2)}moveElement(e,t,n,s=!1){if(void 0===n)return;n.querySelector(".winCl-ShortcutBtn")||this.adjustZIndex(n);const i=Math.abs(e-t),o=s?this.alignToGrid(this.mouse.x-i,this.mouse.y).x:this.mouse.x-i,l=s?this.alignToGrid(this.mouse.x-i,this.mouse.y).y:this.mouse.y-10;n.style.position="absolute",n.style.left=o+"px",n.style.top=l+"px"}showTurnOffScreen(){let e=document.getElementById("turnOff");e.style.backgroundImage="url('Assets/Img_ShutDown.PNG')",e.style.display="block"}black(){let e=document.getElementById("turnOff");e.style.backgroundImage="",e.style.backgroundColor="black"}expandWindow(e){if(!e)return;const t=e.querySelector("iframe");t.style.width="calc(100% - 5px)",t.style.height="calc(100% - 37px)",e.style.width="calc(100% - 6px)",e.style.height="calc(100% - 50px)",e.style.top="0px",e.style.left="0px"}unexpandWindow(e,t){t&&(t.style.width=`${e.width}px`,t.style.height=`${e.height}px`,t.style.top=`${e.position.y}px`,t.style.left=`${e.position.x}px`)}alignToGrid(e,t){return{x:75*Math.round(e/75),y:75*Math.round(t/75)}}}function n(e,t){const n=t.x-e.x,s=t.y-e.y;return Math.sqrt(n*n+s*s)}class s{constructor(e,t,n,s){this.name=e,this.isFullScreen=!1,this.isMinimized=!1,this.width=s.width,this.height=s.height,this.position={x:0,y:0},this.html=t,this.img=n}}class i{constructor(){this.allApps=new Array,this.openedApps=new Array}initAllApps(){let e=new Array(0),t={};t=new s("Order Manager","Apps/OrderManager/ui.html","ImgTrans_OrderManager.png",{width:350,height:200}),e.push(t),t=new s("Callback Sorter","Apps/CallbackSorter/ui.html","Img_Program.PNG",{width:350,height:200}),e.push(t),t=new s("POS Aufgabe","Apps/CustomerProductTester/ui.html","Img_Program.PNG",{width:350,height:200}),e.push(t),this.allApps=e}isAppOpened(e){for(let t=0;t<this.openedApps.length;t++)if(this.openedApps[t].name==e)return!0;return!1}appOpened(e){this.openedApps.push(e)}appClosed(e){for(let t=0;t<this.openedApps.length;t++)this.openedApps[t].name==e&&this.openedApps.splice(t,1)}appHidden(e){for(let t=0;t<this.openedApps.length;t++)this.openedApps[t].name==e&&(this.openedApps[t].isMinimized=!0)}appShown(e){for(let t=0;t<this.openedApps.length;t++)this.openedApps[t].name==e&&(this.openedApps[t].isMinimized=!1)}toggleExpand(e){for(let t=0;t<this.openedApps.length;t++)this.openedApps[t].name==e&&(this.openedApps[t].isFullScreen=!this.openedApps[t].isFullScreen)}moved(e,t,n){for(let s=0;s<this.openedApps.length;s++)this.openedApps[s].name==e&&(this.openedApps[s].position.x=parseInt(t),this.openedApps[s].position.y=parseInt(n))}resized(e,t,n){for(let s=0;s<this.openedApps.length;s++)this.openedApps[s].name==e&&(this.openedApps[s].isFullScreen=!1,this.openedApps[s].width=parseInt(t),this.openedApps[s].height=parseInt(n))}isAppHidden(e){for(let t=0;t<this.openedApps.length;t++)if(this.openedApps[t].name==e)return this.openedApps[t].isMinimized;return!1}isFullscreen(e){for(let t=0;t<this.openedApps.length;t++)if(this.openedApps[t].name==e)return this.openedApps[t].isFullScreen;return!1}deleteApp(e){for(let t=0;t<this.allApps.length;t++)this.allApps[t].name==e&&this.allApps.splice(t,1)}}class o{constructor(e){this.eventController=e,this.x=0,this.y=0,this.isDragging=!1,this.velY=0,this.velX=0,this.isHoldingLMB=!1,this.lastTick=performance.now(),this.eventController.addEvent({name:"MouseController_message",event:"message",callback:e=>{"mousemove"===e.data.type&&(this.x=e.data.clientX,this.y=e.data.clientY)}}),this.eventController.addEvent({name:"MouseController_mousedown",event:"mousedown",callback:()=>{this.isHoldingLMB=!0}}),this.eventController.addEvent({name:"MouseController_mouseup",event:"mouseup",callback:()=>{this.isHoldingLMB=!1}}),this.eventController.addEvent({name:"MouseController_mousemove",event:"mousemove",callback:e=>{e.clientX<=window.innerWidth&&e.clientX>=1&&(this.x=e.clientX),e.clientY<=window.innerHeight-50&&e.clientY>=1&&(this.y=e.clientY)}});const t=document.getElementById("id_desktop");this.debugWindow=document.createElement("div"),this.debugWindow.id="MouseController_debug",t.appendChild(this.debugWindow),this.tick()}tick(){setInterval((()=>{}),50)}debug(){const e=`\n            <table id="MouseController_debug" style="border-collapse: collapse;">\n                <tr>\n                    <td>X:</td>\n                    <td><span id="xValue" style="color: green;">${this.x}</span></td>\n                </tr>\n                <tr>\n                    <td>Y:</td>\n                    <td><span id="yValue" style="color: green;">${this.y}</span></td>\n                </tr>\n                <tr>\n                    <td>Dragging:</td>\n                    <td><span id="draggingValue" style="color: green;">${this.isDragging}</span></td>\n                </tr>\n                <tr>\n                    <td>Holding LMB:</td>\n                    <td><span id="holdingLMBValue" style="color: green;">${this.isHoldingLMB}</span></td>\n                </tr>\n            </table>\n        `;this.debugWindow.innerHTML=e,this.debugWindow.style.position="absolute",this.debugWindow.style.top="10px",this.debugWindow.style.right="10px",this.debugWindow.style.backgroundColor="rgba(255, 255, 255, 0.5)",this.debugWindow.style.padding="10px",this.debugWindow.style.width="250px",this.debugWindow.style.zIndex=1e4}}function l(e,t,n){this.text=e,this.func=n,this.img=t}function a(){this.buttonGroup=new Array(0),this.initStartButtons=function(){const t=void 0;this.buttonGroup.push(new l("Windows Update","Img_Program.PNG",t)),this.buttonGroup.push(new l("Programme","Img_Program.PNG",t)),this.buttonGroup.push(new l("Dokumente","Img_Order3.PNG",t)),this.buttonGroup.push(new l("Einstellungen","Img_Settings.PNG",t)),this.buttonGroup.push(new l("Suchen","Img_Search.PNG",t)),this.buttonGroup.push(new l("Hilfe","Img_HowBook.PNG",t)),this.buttonGroup.push(new l("Ausführen...","Img_Program.PNG",t)),this.buttonGroup.push(new l("Beenden...","Img_Stop.PNG",e.turnOff)),this.bindButtonStart(),this.bindStartButtons(this.buttonGroup)},this.bindButtonStart=function(){document.addEventListener("click",(e=>{let t=document.getElementById("windowStart");"block"===t.style.display&&!document.getElementById("windowStart").contains(e.target)||!document.getElementById("windowStart").contains(e.target)&&!document.getElementById("buttonStart").contains(e.target)?t.style.display="none":t.style.display="block"}),!1)},this.bindStartButtons=function(e){let t=document.getElementById("buttonGroup");for(let n=0;n<e.length;n++){let s=document.createElement("button");s.className="winStartBtn",s.onclick=()=>{e[n].func()},s.innerHTML=`\n            <div style="display: inline-block; margin-top: -14px;">\n                <img alt="alt" src="Assets/${e[n].img}" width="40" height="40">\n            </div>\n            <div style="padding-left:50px; margin-top:-26px;">\n                ${e[n].text}\n            </div>\n            `,t.append(s)}}}class r{constructor(){this.events=new Array,this.frameEvents=new Array,this.iframes=new Array,this.initEvents()}initEvents(){const e=["abort","animationcancel","animationend","animationiteration","animationstart","auxclick","beforeinput","blur","cancel","canplay","canplaythrough","change","click","close","contextmenu","cuechange","dblclick","drag","dragend","dragenter","dragexit","dragleave","dragover","dragstart","drop","durationchange","emptied","ended","error","focus","focusin","focusout","formdata","gotpointercapture","input","invalid","keydown","keypress","keyup","load","loadeddata","loadedmetadata","loadstart","lostpointercapture","mousedown","mouseenter","mouseleave","mousemove","mouseout","mouseover","mouseup","pause","play","playing","pointercancel","pointerdown","pointerenter","pointerleave","pointermove","pointerout","pointerover","pointerup","progress","ratechange","reset","resize","scroll","securitypolicyviolation","seeked","seeking","select","selectionchange","selectstart","stalled","submit","suspend","textInput","timeupdate","toggle","touchcancel","touchend","touchmove","touchstart","transitioncancel","transitionend","transitionrun","transitionstart","volumechange","waiting","wheel"];window.addEventListener("message",(e=>{this.callEvents(e,"message")}));for(const t of e){window.addEventListener(t,(e=>{this.callEvents(e,t)}));for(const e of this.iframes)"mousemove"!==t&&e.addEventListener(t,(e=>{this.callEvents(e,t)}))}for(const t of e){window.addEventListener(t,(e=>{this.callFrameEvents(e,t)}));for(const e of this.iframes)e.addEventListener(t,(e=>{this.callFrameEvents(e,t)}))}}addEvent(e){this.events.includes(e)?this.events[this.events.indexOf(e)]=e:this.events.push(e)}addFrame(e){this.iframes.push(e.contentDocument||e.contentWindow.document),this.initEvents()}addFrameEvent(e){this.frameEvents.push(e)}removeEvent(e){for(let t=0;t<this.events.length;t++)this.events[t].name===e&&this.events.splice(t,1)}removeFrameEvent(e){for(let t=0;t<this.frameEvents.length;t++)this.frameEvents[t].name===e&&this.frameEvents.splice(t,1)}callEvents(e,t){for(let n=0;n<this.events.length;n++)this.events[n].event===t&&this.events[n].callback(e)}callFrameEvents(e,t){for(let n=0;n<this.frameEvents.length;n++)this.frameEvents[n].event===t&&this.frameEvents[n].callback(e)}}const d=new class{constructor(){this.eventController=new r,this.appsController=new i,this.mouse=new o(this.eventController),this.renderController=new t(this.eventController,this.mouse,this.appsController),this.starterController=new a}init(){this.starterController.initStartButtons(),this.renderController.webindowsLoadingScreen(100),this.appsController.initAllApps(),this.initClock();for(let e=0;e<this.appsController.allApps.length;e++)this.renderController.createShortcut(this.appsController.allApps[e]);this.tick()}tick(){setInterval((()=>{}),.06)}initClock(){setInterval((()=>{this.tickTime()}),1e3)}tickTime(){const e=document.getElementById("id_clockTaskBar"),t=new Date,n=String(t.getHours()).padStart(2,"0"),s=String(t.getMinutes()).padStart(2,"0");e.innerHTML=n+":"+s}openApp(e){this.appsController.isAppOpened(e.name)||(this.renderController.createWindow(e),this.appsController.appOpened(e))}closeApp(e){this.appsController.isAppOpened(e)&&(this.renderController.removeWindow(e),this.appsController.appClosed(e))}toggleHideApp(e){if(this.appsController.isAppHidden(e))return this.renderController.showWindow(e),void this.appsController.appShown(e);this.renderController.hideWindow(e),this.appsController.appHidden(e)}turnOff(){this.renderController.showTurnOffScreen(),setTimeout((()=>{this.renderController.black()}),6e3)}};d.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,